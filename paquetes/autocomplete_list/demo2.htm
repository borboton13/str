<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0053)http://technomedia.co.uk/SuperBoxSelect/examples.html -->
<HTML><HEAD><TITLE>SuperBoxSelect Examples (Ext 2.3.0)</TITLE>
<META content="text/html; charset=UTF-8" http-equiv=Content-Type><!--
<link href="libs/ext-2.3.0/resources/css/ext-all.css" media="screen" rel="Stylesheet" type="text/css" />

<script src="libs/ext-2.3.0/adapter/ext/ext-base.js" type="text/javascript"></script>
<script src="libs/ext-2.3.0/ext-all-debug.js" type="text/javascript"></script>
--><LINK 
rel=Stylesheet type=text/css href="demo2_files/ext-all.css" media=screen>
<SCRIPT type=text/javascript src="demo2_files/ext-base.js"></SCRIPT>

<SCRIPT type=text/javascript src="demo2_files/ext-all-debug.js"></SCRIPT>

<SCRIPT type=text/javascript src="demo2_files/states.js"></SCRIPT>

<SCRIPT type=text/javascript src="demo2_files/SuperBoxSelect.js"></SCRIPT>
<LINK rel=Stylesheet type=text/css href="demo2_files/superboxselect.css" 
media=screen>
<STYLE type=text/css>BODY {
	PADDING-BOTTOM: 20px !important; PADDING-LEFT: 20px !important; PADDING-RIGHT: 20px !important; FONT: 13px/1.3 arial, helvetica, clean, sans-serif; PADDING-TOP: 20px !important
}
#page {
	WIDTH: 700px
}
P {
	MARGIN-BOTTOM: 7px; COLOR: #333; FONT-SIZE: 14px
}
FORM P {
	MARGIN-TOP: 7px
}
CODE {
	COLOR: #000
}
#intro P {
	MARGIN-BOTTOM: 20px; COLOR: #000; FONT-SIZE: 15px
}
H1 {
	LINE-HEIGHT: 2em; MARGIN-BOTTOM: 0.8em; FONT-SIZE: 1.6em
}
H2 {
	LINE-HEIGHT: 1.6em; MARGIN-BOTTOM: 0.6em; FONT-SIZE: 1.2em
}
.exForm {
	PADDING-BOTTOM: 20px; PADDING-LEFT: 0px; PADDING-RIGHT: 20px; FONT-SIZE: 12px; PADDING-TOP: 20px
}
.x-tag {
	BACKGROUND-IMAGE: url(tag_green.gif); PADDING-LEFT: 17px !important; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 2px center; COLOR: #693
}
.x-flag {
	BACKGROUND-IMAGE: url(libs/ext-2.3.0/resources/images/default/s.gif); TEXT-INDENT: 17px !important; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 2px center
}
BODY.ext-ie6 .x-flag .x-superboxselect-item-close {
	TOP: 4px; RIGHT: 2px
}
.x-flag-au {
	BACKGROUND-IMAGE: url(flags/Australia.png)
}
.x-flag-at {
	BACKGROUND-IMAGE: url(flags/Austria.png)
}
.x-flag-ca {
	BACKGROUND-IMAGE: url(flags/Canada.png)
}
.x-flag-fr {
	BACKGROUND-IMAGE: url(flags/France.png)
}
.x-flag-it {
	BACKGROUND-IMAGE: url(flags/Italy.png)
}
.x-flag-jp {
	BACKGROUND-IMAGE: url(flags/Japan.png)
}
.x-flag-nz {
	BACKGROUND-IMAGE: url(flags/New Zealand.png)
}
.x-flag-us {
	BACKGROUND-IMAGE: url(flags/USA.png)
}
.small {
	FONT-SIZE: small
}
#f2Form .x-superboxselect-item-focus {
	COLOR: #fff
}
</STYLE>

<SCRIPT type=text/javascript>
    var tempIdCounter = 0;
    
	Ext.BLANK_IMAGE_URL = 'http://static.technomedia.co.uk/libs/ext-2.3.0/resources/images/default/s.gif';
	
    Ext.onReady(function() {

        Ext.QuickTips.init();
		
		
        var states = new Ext.data.SimpleStore({
            fields: ['abbr', 'state', 'nick', 'cls'],
            data: Ext.exampledata.states,
            sortInfo: {field: 'state', direction: 'ASC'}
        });

      	var form1 = new Ext.form.FormPanel({
            id:'f1Form',
			renderTo: 'f1',
            title:'Base Functionality',
            autoHeight: true,
			bodyStyle: 'padding:50px;',
			width: 700,
            items: [{
                allowBlank:false,
                id:'selector1',
                xtype:'superboxselect',
                fieldLabel: 'States',
                emptyText: 'Select some US States',
                resizable: true,
                name: 'states',
                anchor:'100%',
                store: states,
                mode: 'local',
                displayField: 'state',
                displayFieldTpl: '{state} ({abbr})',
                valueField: 'abbr',
                value: 'CA,NY',
				forceSelection : true
             }
            ],
			buttons: [{
                text: "setValue('AK,NY,CO')",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector1').setValue('AK,NY,CO');
                }
            },{
                text: 'getValue()',
                scope: this,
                handler: function(){
                    alert(Ext.getCmp('selector1').getValue());
                }
            }, {
                text: 'BasicForm.getValues()',
                scope: this,
                handler: function(){
                    var v = form1.getForm().getValues(true);
                    alert(v);
                }
            },{
                text: "reset",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector1').reset();
                }
            },{
                text: "disable",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector1').disable();
                }
            },{
                text: "enable",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector1').enable();
                }
            }]
        });

		var tagStore = new Ext.data.SimpleStore({
            fields: ['id', 'name'],
            data: [['Architecture','Architecture'],['Sport','Sport'],['Science','Science'],['Nature','Nature'],['Technology','Technology'],['Travel','Travel']],
            sortInfo: {field: 'name', direction: 'ASC'}
        });

		var form2 = new Ext.form.FormPanel({
            id:'f2Form',
			renderTo: 'f2',
            title:'Allowing New Data',
            autoHeight: true,
			bodyStyle: 'padding:50px;',
			width: 700,
            items: [{
				allowBlank:false,
				msgTarget: 'under',
                allowAddNewData: true,
                id:'selector2',
                xtype:'superboxselect',
                fieldLabel: 'Tags',
                emptyText: 'Enter or select the category tags',
                resizable: true,
                name: 'tags',
                anchor:'100%',
                store: tagStore,
                mode: 'local',
                displayField: 'name',
                valueField: 'id',
                extraItemCls: 'x-tag',
				supressMultipleRemoveEvents : true,
                listeners: {
                    beforeadditem: function(bs,v){
                        //console.log('beforeadditem:', v);
                        //return false;
                    },
                    additem: function(bs,v, r){
                        //console.log('additem:', v, r);
                    },
                    beforeremoveitem: function(bs,v){
                        //console.log('beforeremoveitem:', v);
                        //return false;
                    },
                    removeitem: function(bs,v,r){
                        console.log('removeitem:', v, r);
						//console.log(bs.getValue());
						//console.log(form2.getForm().getValues(true));
                    },
                    newitem: function(bs,v){
                        v = v.slice(0,1).toUpperCase() + v.slice(1).toLowerCase();
                        var newObj = {
                            id: v,
                            name: v
                        };
                        bs.addItem(newObj);
                    },
					clear : function(bs) {
						//console.log('clear');
					}
                }
             }
            ],
			buttons: [{
                text: "Add Existing Tag (addItem)",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector2').addItem({id:'Travel', name:'Travel'});
                }
            },{
                text: "Add New Tag (addItem)",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector2').addItem({id:'Beauty', name:'Beauty'});
                }
            },{
                text: "Set New Values (setValueEx)",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector2').setValueEx([{id:'Finance', name:'Finance'},{id:'Gardening', name:'Gardening'}]);
                }
            },{
                text: 'getValue()',
                scope: this,
                handler: function(){
                    alert(Ext.getCmp('selector2').getValue());
                }
            },{
                text: "reset",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector2').reset();
                }
            }]
        });

		var countryData = [
	        ['AU', 'Australia','x-flag-au','font-style:italic'],
	        ['AT', 'Austria', 'x-flag-at',''],
	        ['CA', 'Canada', 'x-flag-ca',''],
	        ['FR', 'France', 'x-flag-fr',''],
	        ['IT', 'Italy', 'x-flag-it',''],
	        ['JP', 'Japan', 'x-flag-jp',''],
	        ['NZ', 'New Zealand', 'x-flag-nz',''],
	        ['US', 'USA', 'x-flag-us','']
	    ];

		var countryStore = new Ext.data.SimpleStore({
            fields: ['code', 'name', 'cls', 'style'],
            data: countryData,
            sortInfo: {field: 'name', direction: 'ASC'}
        });

		var form3 = new Ext.form.FormPanel({
            id:'f3Form',
			renderTo: 'f3',
            title:'Extra Functionality',
            autoHeight: true,
			bodyStyle: 'padding:50px;',
			width: 700,
            items: [{
				allowBlank:false,
				msgTarget: 'side',
                renderFieldBtns:false,
                id:'selector3',
                xtype:'superboxselect',
                fieldLabel: 'Countries',
                resizable: true,
                name: 'countries',
                anchor:'100%',
                store: countryStore,
                mode: 'local',
                displayField: 'name',
                valueField: 'code',
                classField: 'cls',
                styleField: 'style',
                extraItemCls: 'x-flag',
                extraItemStyle: 'border-width:2px',
                stackItems: true
             }
            ],
			buttons: [{
                text: "Add Australia (addItem)",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector3').addItem({code:'AU'});
                }
            },{
                text: 'getValue()',
                scope: this,
                handler: function(){
                    alert(Ext.getCmp('selector3').getValue());
                }
            }, {
                text: 'BasicForm.getValues()',
                scope: this,
                handler: function(){
                    var v = form3.getForm().getValues(true);
                    alert(v);
                }
            },{
                text: "reset",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector3').reset();
                }
            }]
        });

		var states2 = new Ext.data.SimpleStore({
            fields: ['abbr', 'state', 'nick', 'cls'],
            data: Ext.exampledata.states,
            sortInfo: {field: 'state', direction: 'ASC'}
        });

      	var form4 = new Ext.form.FormPanel({
            id:'f4Form',
			renderTo: 'f4',
            title:'Prevent TAB key navigation',
            autoHeight: true,
			bodyStyle: 'padding:50px;',
			width: 700,
            items: [{
                allowBlank:false,
				msgTarget: 'title',
                id:'selector4',
                xtype:'superboxselect',
                fieldLabel: 'States',
                resizable: true,
                name: 'states2',
                anchor:'100%',
                store: states2,
                mode: 'local',
                displayField: 'state',
                displayFieldTpl: '{state} ({abbr})',
                valueField: 'abbr',
				navigateItemsWithTab: false
             }
            ],
			buttons: [{
                text: "setValue('AK,NY,CO')",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector4').setValue('AK,NY,CO');
                }
            },{
                text: 'getValue()',
                scope: this,
                handler: function(){
                    alert(Ext.getCmp('selector4').getValue());
                }
            }, {
                text: 'BasicForm.getValues()',
                scope: this,
                handler: function(){
                    var v = form4.getForm().getValues(true);
                    alert(v);
                }
            },{
                text: "reset",
                scope: this,
                handler: function(){
                    Ext.getCmp('selector4').reset();
                }
            }]
        });
		
		//example 5
		
		var states3 = new Ext.data.SimpleStore({
            fields: ['abbr', 'state', 'nick', 'cls'],
            data: Ext.exampledata.states,
            sortInfo: {field: 'state', direction: 'ASC'}
        });

      	new Ext.ux.form.SuperBoxSelect({
				applyTo: 'f5-sbs',
                allowBlank:false,
				msgTarget: 'title',
                id:'selector5',
                xtype:'superboxselect',
                fieldLabel: 'States',
                resizable: true,
                name: 'states3',
                width:300,
                store: states3,
                mode: 'local',
                displayField: 'state',
                displayFieldTpl: '{state} ({abbr})',
                valueField: 'abbr',
				navigateItemsWithTab: false
             });
			 
			 //example 6
			 new Ext.ux.form.SuperBoxSelect({
				transform: 'f6-sbs',
                allowBlank:false,
				msgTarget: 'title',
                id:'selector6',
                fieldLabel: 'States',
                resizable: true,
                name: 'countries2',
                width:200,
                displayField: 'text',
                valueField: 'value',
                classField: 'cls',
                styleField: 'style',
				extraItemCls: 'x-flag',
                extraItemStyle: 'border-width:2px',
                stackItems: true
             });
    });
</SCRIPT>

<META name=GENERATOR content="MSHTML 8.00.6001.18882"></HEAD>
<BODY>
<DIV id=page>
<H1>SuperBoxSelect Examples (Ext 2.3.0)</H1>
<DIV id=intro>
<P>SuperBoxSelect is a ComboBox component which displays selected items as 
labelled boxes within the form field. As seen on facebook, hotmail and other 
sites, it combines both auto-complete and multi-selection 
capabilities.</P></DIV>
<H2>Example 1</H2>
<P>This example demonstrates the base functionality of auto-completion and 
multi-select capabilities. Apart from the <CODE>displayFieldTpl</CODE> config, 
all other functionality is as per the default behaviour.</P>
<DIV id=f1 class=exForm></DIV>
<H2>Example 2</H2>
<P>This example demonstrates the <CODE>allowNewData</CODE> config, which allows 
new data to be added via the <CODE>addItem</CODE> and <CODE>setValueEx</CODE> 
methods. New data entered by the user is first sent to a callback function via 
the <CODE>newitem</CODE> event as shown in the source code.</P>
<P>The <CODE>extraItemCls</CODE> config property is also used in this example, 
and enables additional styling of the selected items.</P>
<DIV id=f2 class=exForm></DIV>
<H2>Example 3</H2>
<P>This example demonstrates the <CODE>stackItems</CODE> config, which forces 
the selected items to be rendered stacked.</P>
<P>The per item styling capabilities are demonstrated by the use of the 
<CODE>classField</CODE> and <CODE>styleField</CODE> config properties.</P>
<P>This demonstration hides the in-field ‘clear’ and ‘expand’ buttons by setting 
the <CODE>renderFieldBtns</CODE> config to ‘false’</P>
<DIV id=f3 class=exForm></DIV>
<H2>Example 4</H2>
<P>This example demonstrates the <CODE>navigateItemsWithTab</CODE> config 
property set to ‘false’. This prevents the TAB key from focusing the selected 
items.</P>
<P>The <I>ARROW</I> keys and <I>HOME</I> and <I>END</I> keys can still be used 
for keyboard navigation between selected items.</P>
<DIV id=f4 class=exForm></DIV>
<H2>Example 5</H2>
<P>This example demonstrates using <CODE>applyTo</CODE> to apply the component 
to an existing dom element.</P>
<FORM id=f5 class=exForm><INPUT id=f5-sbs type=text><INPUT value="Submit Query" type=submit> </FORM>
<H2>Example 6</H2>
<P>This example demonstrates using <CODE>transform</CODE> on an existing 
SELECT.</P>
<FORM id=f6 class=exForm>
<P>Transformed SELECT</P><SELECT id=f6-sbs multiple> <OPTION 
  style="FONT-STYLE: italic" class=x-flag-au selected 
  value=AU>Australia</OPTION> <OPTION class=x-flag-at value=AT>Austria</OPTION> 
  <OPTION class=x-flag-ca value=CA>Canada</OPTION> <OPTION class=x-flag-fr 
  value=FR>France</OPTION> <OPTION class=x-flag-it value=IT>Italy</OPTION> 
  <OPTION class=x-flag-nz value=NZ>New Zealand</OPTION> <OPTION class=x-flag-us 
  selected value=US>USA</OPTION></SELECT> 
<P>Originally looked like this</P><SELECT id=f6-plain multiple> <OPTION 
  style="FONT-STYLE: italic" class="x-flag x-flag-au" selected 
  value=AU>Australia</OPTION> <OPTION class="x-flag x-flag-at" 
  value=AT>Austria</OPTION> <OPTION class="x-flag x-flag-ca" 
  value=CA>Canada</OPTION> <OPTION class="x-flag x-flag-fr" 
  value=FR>France</OPTION> <OPTION class="x-flag x-flag-it" 
  value=IT>Italy</OPTION> <OPTION class="x-flag x-flag-nz" value=NZ>New 
  Zealand</OPTION> <OPTION class="x-flag x-flag-us" selected 
  value=US>USA</OPTION></SELECT> </FORM></DIV><SPAN class=small>Flag icons by 
http://www.icondrawer.com</SPAN> </BODY></HTML>
